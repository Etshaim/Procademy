/////////////////////////////////////////////////////////////////
//
//	Stream DoubleQueue
//
//  1. 데이터 넣는 스레드와, 데이터 프로세싱 스레드를 병렬로 분리 시킬 때 사용,
//
//	2. InputQueue, OutputQueue 를 하나씩 가지고 있는 스트리밍 큐.
//     멀티스레딩 환경에서 병렬 입출력 처리를 가능하게 해줌.
//
//	3. Output 큐가 비어있다면 Input 과 Output 을 플립 ~
//
//
// - 사용법.
//
// CStreamDQ	clStreamQ;
//
// : IN Thread 
// while (1)
// {
//		// 처리 할 데이터를 Put Put Put
//		clStreamQ.Put( ... );
//		// Out 스레드 깨움
// }
//
//
// : OUT Proc Thread
// while (1)
// {
//		// 큐에 데이터가 들어온게 없다면 쉼 ~
//
//		clStreamQ.FlipBuffer();	
//
//		// 0. Out 버퍼가 비어있다면 Flip 하여 IN <-> OUT 변경.
//
//		// 그냥 호출해도 내부에서 0 아니면 플립 안됨.
//		
//		// 1. 데이터를 뽑아서 처리처리처리 
//		{
//			clStreamQ.Get( ... );
//			처리처리처리.
//		}
//
//		// 2. 데이터 확인을 필요로 할 경우 (헤더 사용시) Peek 으로 뽑아서 체크 후 Get
//		{
//			clStreamQ.Peek(Header);
//			if ( Header .... )
//				clStreamQ.Get( ... );
//			처리처리처리.
//		}
// }
//
/////////////////////////////////////////////////////////////////
#ifndef __STREAM_DOUBLE_QUEUE__
#define __STREAM_DOUBLE_QUEUE__

#include <windows.h>

class CStreamDQ
{
private:

	//////////////////////////////////////////////////////////////////////
	// 큐 버퍼 구조체.
	//////////////////////////////////////////////////////////////////////
	struct stQueueBuffer
	{
		stQueueBuffer()
		{
			chpBuffer = NULL;
			iReadPos = 0;
			iWritePos = 0;
		}

		~stQueueBuffer()
		{
		}

		//------------------------------------------------------------
		// 버퍼 포인터.
		//------------------------------------------------------------
		char		*chpBuffer;

		//------------------------------------------------------------
		// 읽기, 쓰기 위치.
		//------------------------------------------------------------
		int			iReadPos;
		int			iWritePos;
	};


public:
	// StreamDQ Enum.

	enum eSTREAM_DQ
	{
		eBUFFER_DEFAULT				= 5000,		// 버퍼의 기본 크기.
		eBUFFER_BLANK				= 0			// 확실한 구분을 위해 8Byte 의 빈공간.
												// 사실 필요 없음
	};


	//////////////////////////////////////////////////////////////////////////
	// 생성자, 파괴자.
	//
	// Parameters: (int) 버퍼 사이즈.
	// Return: 없음.
	//////////////////////////////////////////////////////////////////////////
			CStreamDQ();
			CStreamDQ(int iBufferSize);

	virtual	~CStreamDQ();

protected:
	//////////////////////////////////////////////////////////////////////////
	// 초기화.
	//
	// Parameters: 없음.
	// Return: 없음.
	//////////////////////////////////////////////////////////////////////////
	void	Initial(void);


public:
	/////////////////////////////////////////////////////////////////////////
	// 버퍼 전체의 용량 얻음.
	//
	// Parameters: 없음.
	// Return: (int)버퍼용량.
	/////////////////////////////////////////////////////////////////////////
	int		GetBufferSize(void);

	/////////////////////////////////////////////////////////////////////////
	// 현재 사용중인 용량 얻기.
	//
	// Parameters: 없음.
	// Return: (int)사용중인 용량.
	/////////////////////////////////////////////////////////////////////////
	int		GetUseSize_OUT(void);
	int		GetUseSize_IN(void);

protected:
	/////////////////////////////////////////////////////////////////////////
	// 실제로 버퍼의 포인터 위치를 계산하여 정확하게 계산된 사용사이즈.
	// 외부에서는 사용하지 않고 내부용으로 사용한다.
	// 
	// Parameters: 없음.
	// Return: (int)사용중 용량.
	/////////////////////////////////////////////////////////////////////////
	int		GetUseSize_Correct_OUT(void);
	int		GetUseSize_Correct_IN(void);

public:
	/////////////////////////////////////////////////////////////////////////
	// 현재 버퍼에 남은 용량 얻기.
	//
	// Parameters: 없음.
	// Return: (int)남은용량.
	/////////////////////////////////////////////////////////////////////////
	int		GetFreeSize_OUT(void);
	int		GetFreeSize_IN(void);


	/////////////////////////////////////////////////////////////////////////
	// InputBuffer WritePos 에 데이타 넣음.
	//
	// 마지막 인자 bLock 은, Put 내부에서 Lock_IN 을 할 것인지 여부이다.
	// 간혹 데이터를 여러번에 걸쳐서 Put 을 해야하는 경우 내부 Lock 이 아닌 외부에서 Lock 을 해주도록 한다.
	//
	// Parameters: (char *)데이타 포인터. (int)크기. (bool) Lock 여부.
	// Return: (int)넣은 크기.
	/////////////////////////////////////////////////////////////////////////
	int		Put(char *chpData, int iSize, bool bLock = true);

	/////////////////////////////////////////////////////////////////////////
	// Output ReadPos 에서 데이타 가져옴. ReadPos 이동.
	//
	// Parameters: (BYTE *)데이타 포인터. (int)크기.
	// Return: (int)가져온 크기.
	/////////////////////////////////////////////////////////////////////////
	int		Get(char *chpDest, int iSize);

	/////////////////////////////////////////////////////////////////////////
	// Output ReadPos 에서 데이타 읽어옴. ReadPos 고정.
	//
	// Parameters: (char *)데이타 포인터. (int)크기.
	// Return: (int)가져온 크기.
	/////////////////////////////////////////////////////////////////////////
	int		Peek(char *chpDest, int iSize);


	/////////////////////////////////////////////////////////////////////////
	// 원하는 길이만큼 읽기위치 에서 삭제.
	//
	// Parameters: 없음.
	// Return: 없음.
	/////////////////////////////////////////////////////////////////////////
	void	RemoveData_OUT(int iSize);
	void	RemoveData_IN(int iSize);

	/////////////////////////////////////////////////////////////////////////
	// 버퍼의 모든 데이타 삭제.
	//
	// Parameters: 없음.
	// Return: 없음.
	/////////////////////////////////////////////////////////////////////////
	void	ClearBuffer_OUT(void);
	void	ClearBuffer_IN(void);


	//=============================================================================
	// Flip.
	// ============================================================================
	/////////////////////////////////////////////////////////////////////////
	// Output, Input 의 버퍼를 교환한다.
	//
	// Parameters: 없음.
	// Return: (bool) FLIP YES. NO
	/////////////////////////////////////////////////////////////////////////
	bool	FlipBuffer(void);

protected:

	//------------------------------------------------------------
	// 현재 사용되고 있는 버퍼.
	//------------------------------------------------------------
	int						m_iInputBuffer;
	int						m_iOutputBuffer;

	//------------------------------------------------------------
	// 두개의 버퍼 포인터.
	//------------------------------------------------------------
	stQueueBuffer			m_stBuffer[2];
	int						m_stUseSize[2];

	//------------------------------------------------------------
	// 버퍼 사이즈.
	//------------------------------------------------------------
	int						m_iBufferSize;
};

#endif // !__STREAM_DOUBLE_QUEUE__
